{
  "address": "0xc0100348D04cb9Bd0Ee505d408C2CC3A71492379",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tablelandRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "AlreadyRevealed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "AmountTooLow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "alreadHasP2",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "tryingToJoinOwnGame",
          "type": "bool"
        }
      ],
      "name": "CannotJoinGame",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "InvalidBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPassword",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoActiveTimer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSecondPlayer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughMoneyInContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "timerStillRunning",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "p1Revealed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "p2Revealed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "alreadyResolved",
          "type": "bool"
        }
      ],
      "name": "NotResolvable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "PlayerBalanceNotEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimerFinished",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "CreatedGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum PaperRockScissors.Choices",
          "name": "",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum PaperRockScissors.Choices",
          "name": "",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "GameDraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "JoinedGameOf",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PaidOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum PaperRockScissors.Choices",
          "name": "",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum PaperRockScissors.Choices",
          "name": "",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "WonGameAgainst",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "p1SaltedChoice",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "encChoice",
              "type": "bytes32"
            },
            {
              "internalType": "enum PaperRockScissors.Choices",
              "name": "p1ClearChoice",
              "type": "uint8"
            },
            {
              "internalType": "enum PaperRockScissors.Choices",
              "name": "p2ClearChoice",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "p1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "p2",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "entryFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timerStart",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "resolved",
              "type": "bool"
            }
          ],
          "internalType": "struct PaperRockScissors.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGameEntryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getTimeLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "encChoice",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        }
      ],
      "name": "joinGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minEntryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "resolveGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "movePw",
          "type": "string"
        }
      ],
      "name": "revealChoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setMinEntryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTimeout",
          "type": "uint256"
        }
      ],
      "name": "setRevealTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pct",
          "type": "uint256"
        }
      ],
      "name": "setTaxPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encChoice",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        }
      ],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTax",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x43b3f1c154b77eaafbd8aae457e6440e0d3faf8513d3cde6307ce8506b5e5f66",
  "receipt": {
    "to": null,
    "from": "0x1a5D8e355154b582CFdb222F6ac4Bcb9d08FAedC",
    "contractAddress": "0xc0100348D04cb9Bd0Ee505d408C2CC3A71492379",
    "transactionIndex": 1,
    "gasUsed": "2951662",
    "logsBloom": "0x
    "blockHash": "0x187d6d57f67f3ba76421243a09cd8da4c614c1284fceced8da5ef39edd30b066",
    "transactionHash": "0x43b3f1c154b77eaafbd8aae457e6440e0d3faf8513d3cde6307ce8506b5e5f66",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 7400178,
        "transactionHash": "0x43b3f1c154b77eaafbd8aae457e6440e0d3faf8513d3cde6307ce8506b5e5f66",
        "address": "0xc0100348D04cb9Bd0Ee505d408C2CC3A71492379",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001a5d8e355154b582cfdb222f6ac4bcb9d08faedc"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x187d6d57f67f3ba76421243a09cd8da4c614c1284fceced8da5ef39edd30b066"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 7400178,
        "transactionHash": "0x43b3f1c154b77eaafbd8aae457e6440e0d3faf8513d3cde6307ce8506b5e5f66",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c0100348d04cb9bd0ee505d408c2cc3a71492379",
          "0x0000000000000000000000000000000000000000000000000000000000000185"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x187d6d57f67f3ba76421243a09cd8da4c614c1284fceced8da5ef39edd30b066"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 7400178,
        "transactionHash": "0x43b3f1c154b77eaafbd8aae457e6440e0d3faf8513d3cde6307ce8506b5e5f66",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000c0100348d04cb9bd0ee505d408c2cc3a714923790000000000000000000000000000000000000000000000000000000000000185000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000bb435245415445205441424c457072735f35202867616d655f696420494e544547455220554e495155452c20637265617465645f61745f74696d657374616d7020494e54454745522c2067616d655f656e7472795f66656520494e54454745522c20706c617965725f3120544558542c20706c617965725f3220544558542c2077696e6e657220544558542c20706c617965725f315f6d6f766520494e54454745522c20706c617965725f325f6d6f766520494e544547455220293b0000000000",
        "logIndex": 5,
        "blockHash": "0x187d6d57f67f3ba76421243a09cd8da4c614c1284fceced8da5ef39edd30b066"
      }
    ],
    "blockNumber": 7400178,
    "cumulativeGasUsed": "3226998",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDA8EA22d092307874f30A1F277D1388dca0BA97a"
  ],
  "numDeployments": 1,
  "solcInputHash": "a50e1c3640841da96bc8bc94d4e196da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tablelandRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"AlreadyRevealed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"AmountTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"alreadHasP2\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tryingToJoinOwnGame\",\"type\":\"bool\"}],\"name\":\"CannotJoinGame\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InvalidBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPassword\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveTimer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSecondPlayer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"}],\"name\":\"NotEnoughMoneyInContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"timerStillRunning\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"p1Revealed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"p2Revealed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"alreadyResolved\",\"type\":\"bool\"}],\"name\":\"NotResolvable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"PlayerBalanceNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimerFinished\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CreatedGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum PaperRockScissors.Choices\",\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum PaperRockScissors.Choices\",\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GameDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"JoinedGameOf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum PaperRockScissors.Choices\",\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum PaperRockScissors.Choices\",\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WonGameAgainst\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"p1SaltedChoice\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encChoice\",\"type\":\"bytes32\"},{\"internalType\":\"enum PaperRockScissors.Choices\",\"name\":\"p1ClearChoice\",\"type\":\"uint8\"},{\"internalType\":\"enum PaperRockScissors.Choices\",\"name\":\"p2ClearChoice\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"p1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timerStart\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"internalType\":\"struct PaperRockScissors.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameEntryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getTimeLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encChoice\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEntryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"resolveGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"movePw\",\"type\":\"string\"}],\"name\":\"revealChoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setMinEntryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTimeout\",\"type\":\"uint256\"}],\"name\":\"setRevealTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pct\",\"type\":\"uint256\"}],\"name\":\"setTaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encChoice\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTax\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"DOPE DAO\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Find the list of tableland registries here https://docs.tableland.xyz/limits-and-deployed-contracts#ae3cfc1cfd2941bfa401580aa1e05c5e\",\"params\":{\"tablelandRegistry\":\"Address of the \\\"tableland registry\\\" on the chain this will be deployed on\"}},\"getGame(uint256)\":{\"returns\":{\"_0\":\"Game struct\"}},\"getGameEntryFee(uint256)\":{\"returns\":{\"_0\":\"Entry fee for a game id. 1/2 the \\\"pot\\\"\"}},\"joinGame(uint256,bytes32,uint256)\":{\"params\":{\"encChoice\":\"sha256 hashed move and password\",\"entryFee\":\"The amount of entry fee required for this game.\",\"gameId\":\"ID of game stored in local storage.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resolveGame(uint256)\":{\"details\":\"Game is not resolvable if timer is still running and both players      have not revealed their move.\"},\"startGame(bytes32,uint256)\":{\"params\":{\"encChoice\":\"sha256 hashed move and password\",\"entryFee\":\"The amount of entry fee required for this game.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PAPER, ROCK, SCISSORS\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Create tableland schema for our leaderboard.\"},\"getGame(uint256)\":{\"notice\":\"Returns a single game for Player 1\"},\"getTimeLeft(uint256)\":{\"notice\":\"Return time left after Player 2 has revealed their move.\"},\"joinGame(uint256,bytes32,uint256)\":{\"notice\":\"Allows p2 to join an existing game by gameId Requires player to commit their hashed move and password to join. Will fail if player does not have high enough balance on contract.\"},\"pauseGame()\":{\"notice\":\"Pause game in case of suspicious activity\"},\"revealTimeout()\":{\"notice\":\"Both players have 12 hours to reveal their move. If one of them fails to do so the other can take the pot.\"},\"startGame(bytes32,uint256)\":{\"notice\":\"Whoever calls this makes a new game and becomes \\\"p1\\\" Requires a sha256 encoded move and password to be stored as A player can make multiple games at a time.\"},\"unpauseGame()\":{\"notice\":\"Unpause game\"}},\"notice\":\"A competitive, token-based, on-chain game of skill that persists results to         a public leaderboard stored in tableland.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PaperRockScissors.sol\":\"PaperRockScissors\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@tableland/evm/contracts/ITablelandController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of a TablelandController compliant contract.\\n *\\n * This interface can be implemented to enabled advanced access control for a table.\\n * Call {ITablelandTables-setController} with the address of your implementation.\\n *\\n * See {test/TestTablelandController} for an example of token-gating table write-access.\\n */\\ninterface ITablelandController {\\n    /**\\n     * @dev Object defining how a table can be accessed.\\n     */\\n    struct Policy {\\n        // Whether or not the table should allow SQL INSERT statements.\\n        bool allowInsert;\\n        // Whether or not the table should allow SQL UPDATE statements.\\n        bool allowUpdate;\\n        // Whether or not the table should allow SQL DELETE statements.\\n        bool allowDelete;\\n        // A conditional clause used with SQL UPDATE and DELETE statements.\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n        // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n        // This can be useful for limiting how a table can be modified.\\n        // Use {Policies-joinClauses} to include more than one condition.\\n        string whereClause;\\n        // A conditional clause used with SQL INSERT statements.\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n        // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n        // This can be useful for limiting how table data ban be added.\\n        // Use {Policies-joinClauses} to include more than one condition.\\n        string withCheck;\\n        // A list of SQL column names that can be updated.\\n        string[] updatableColumns;\\n    }\\n\\n    /**\\n     * @dev Returns a {Policy} struct defining how a table can be accessed by `caller`.\\n     */\\n    function getPolicy(address caller) external payable returns (Policy memory);\\n}\\n\",\"keccak256\":\"0xda5f7e8144be7322e66e0f6652e040d2e8409345843d225efdd11adf05cddf1d\",\"license\":\"MIT\"},\"@tableland/evm/contracts/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITablelandController.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {ITablelandController.Policy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        ITablelandController.Policy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function createTable(address owner, string memory statement)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @dev Runs a SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner\\n     * - `tableId` must exist\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function runSQL(\\n        address caller,\\n        uint256 tableId,\\n        string memory statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT bases write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xd8f2b5571885cec2b5109d1a3f9c13afe7925c4dbe995c4cd5658b490fed2a7d\",\"license\":\"MIT\"},\"src/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nlibrary Errors {\\n    error AmountTooLow(uint256 available, uint256 required);\\n    error CannotJoinGame(bool alreadHasP2, bool tryingToJoinOwnGame);\\n    error InvalidBalance(uint256 balance);\\n    error IndexOutOfBounds(uint256 gameId);\\n    error InvalidPassword();\\n    error NoActiveTimer();\\n    error NoSecondPlayer();\\n    error NotEnoughMoneyInContract(uint256 available, uint256 requested);\\n    error NotSecondPlayer(address expected, address received);\\n    error PlayerBalanceNotEnough(uint256 available, uint256 required);\\n    error TimerFinished();\\n    error TimerStillRunning();\\n    error AlreadyRevealed(address player, uint256 gameId);\\n    error NotResolvable(bool timerStillRunning, bool p1Revealed, bool p2Revealed, bool alreadyResolved);\\n}\\n\",\"keccak256\":\"0x59692ed7b146cd0d1f2948098a5209d0c3afda10d1318c6c50f7ddc4f33ee2e2\",\"license\":\"UNLICENSED\"},\"src/PaperRockScissors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { Errors } from \\\"./Errors.sol\\\";\\nimport { TaxableGame } from \\\"./TaxableGame.sol\\\";\\nimport { ITablelandTables } from \\\"@tableland/evm/contracts/ITablelandTables.sol\\\";\\n\\n//                                       .::^^^^::..\\n//                              .:^!?YPG##&&$$$$$&&#BP5J7~:\\n//                          .!PB#&$$$$$$$$$$$$$$$$$$$$$$$$&BPJ!:\\n//                       .!5#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$&BY^\\n//                    .!5&$$$$$$$$$$$$$$$$$#BB##&$$$$$$$$$$$$$$$$$$P^\\n//                  ~5#$$$$$$$$$$$$#G5YJ?!^.  ...:^!?5G#$$$$$$$$$$$$$Y:\\n//                !G$$$$$$$$$$$#57^.                   .~?G&$$$$$$$$$$&J.\\n//              ^G$$$$$$$$$$&P!.                           :?B$$$$$$$$$$#!\\n//             J$$$$$$$$$$#J:                                 !B$$$$$$$$$$5.\\n//           .P$$$$$$$$$#?.                                     ?&$$$$$$$$$G.\\n//          :G$$$$$$$$&?.              .                         :G$$$$$$$$$Y\\n//         ~#$$$$$$$$5:             .Y##Y.                         5$$$$$$$$&:\\n//        Y$$$$$$$$$?              :#$$$$?      .?YJ^               P$$$$$$$$5\\n//       ~$$$$$$$$$?               Y$$$$$Y     ^B$$$$!              .#$$$$$$$$^\\n//       P$$$$$$$$?     ~!^.       P$$$$$?     B$$$$$7               J$$$$$$$$J\\n//      7$$$$$$$$5     ^$$$#BB##Y  !$$$$G      B$$$$G                ^$$$$$$$$J\\n//     ^$$$$$$$$&.      J$$$$$$&Y   7GGY.      Y$$$G.                :&$$$$$$$!\\n//     Y$$$$$$$$G        7$$$$?.               .JP?    !J!~!??^      ^$$$$$$$$^\\n//     7$$$$$$$$#.       :$$$$^                       ?$$$$$$$$~     ?$$$$$$$$^\\n//     :&$$$$$$$$~        G$$$#:                      .5$$$$$#Y:     B$$$$$$$&:\\n//     .#$$$$$$$$7        ^&$$$#^                     .B$$$$J.      7$$$$$$$$?\\n//      5$$$$$$$#.         ^#$$$&7                   .G$$$$!       :#$$$$$$$J\\n//      !$$$$$$$#^          :P$$$$P~               .?#$$$$!        G$$$$$$$Y\\n//      .#$$$$$$$&!           !B$$$$BJ~:      .:~?P&$$$$G~       .P$$$$$$$P\\n//       Y$$$$$$$$$7            !P&$$$$&#GPPPG#&$$$$$$P~        :G$$$$$$$B.\\n//       :&$$$$$$$$$?             :!YG&$$$$$$$$$$$&GJ^         ?&$$$$$$$#:\\n//        7$$$$$$$$$$Y.               .^~7??7!~!!~:         .7B$$$$$$$$G:\\n//         ~B$$$$$$$$$B!                                  ^J#$$$$$$$$&J\\n//           J$$$$$$$$$$BJ~.                           ^JB$$$$$$$$$$P^\\n//            ^G$$$$$$$$$$$#P?^.                   :!YB$$$$$$$$$$$#!\\n//              ?&$$$$$$$$$$$$$#G5?!^:.  .:~7??J5P#&$$$$$$$$$$$&G?.\\n//               .J#$$$$$$$$$$$$$$$$$&#BB#&$$$$$$$$$$$$$$$$$$G7.\\n//                 .7P#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$&G?^\\n//                    .^7J5G#$$$$$$$$$$$$$$$$$$$$$$$$&B57:\\n//                          .^7YPB#&&&$$$&&&&##BG5J7~:\\n//                                ..::::::::...\\n//\\n\\n/// @title PAPER, ROCK, SCISSORS\\n/// @author DOPE DAO\\n/// @notice A competitive, token-based, on-chain game of skill that persists results to\\n///         a public leaderboard stored in tableland.\\ncontract PaperRockScissors is Ownable(), Pausable(), TaxableGame {\\n    enum Choices {\\n        NONE,\\n        ROCK,\\n        PAPER,\\n        SCISSORS,\\n        INVALID\\n    }\\n\\n    struct Game {\\n        bytes32 p1SaltedChoice;\\n        bytes32 encChoice;\\n        Choices p1ClearChoice;\\n        Choices p2ClearChoice;\\n        address p1;\\n        address p2;\\n        uint256 entryFee;\\n        uint256 timerStart;\\n        bool resolved;\\n    }\\n\\n    /// Both players have 12 hours to reveal their move.\\n    /// If one of them fails to do so the other can take the pot.\\n    uint256 public revealTimeout = 12 hours;\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _games;\\n    mapping(uint256 => Game) Games;\\n\\n    ITablelandTables private _tableland;\\n    uint256 private _gameTableId;\\n    string private _gameTable;\\n    string private _tablePrefix = \\\"prs\\\";\\n\\n    event CreatedGame(address indexed, uint256, uint256);\\n    event JoinedGameOf(address indexed, address indexed, uint256, uint256, uint256);\\n    event WonGameAgainst(address indexed, Choices, address indexed, Choices, uint256, uint256);\\n    event GameDraw(address indexed, Choices, address indexed, Choices, uint256, uint256);\\n\\n    /// Create tableland schema for our leaderboard.\\n    /// @param tablelandRegistry Address of the \\\"tableland registry\\\" on the chain this will be deployed on\\n    /// @dev Find the list of tableland registries here https://docs.tableland.xyz/limits-and-deployed-contracts#ae3cfc1cfd2941bfa401580aa1e05c5e\\n    constructor(address tablelandRegistry) {\\n        _createTable(tablelandRegistry);\\n    }\\n\\n    function setRevealTimeout(uint256 newTimeout) public onlyOwner {\\n        revealTimeout = newTimeout;\\n    }\\n\\n    /// Returns a single game for Player 1\\n    /// @return Game struct\\n    function getGame(uint256 gameId) public view returns (Game memory) {\\n        Game storage game = Games[gameId];\\n        if (game.p1 == address(0)) revert Errors.IndexOutOfBounds(gameId);\\n\\n        return game;\\n    }\\n\\n    /// Return time left after Player 2 has revealed their move.\\n    function getTimeLeft(uint256 gameId) public view returns (uint256) {\\n        Game memory game = getGame(gameId);\\n        if (_didTimerRunOut(game.timerStart)) revert Errors.TimerFinished();\\n        if (game.p2 == address(0)) revert Errors.NoActiveTimer();\\n        return revealTimeout - (block.timestamp - game.timerStart);\\n    }\\n\\n    /// @return Entry fee for a game id. 1/2 the \\\"pot\\\"\\n    function getGameEntryFee(uint256 gameId) public view returns (uint256) {\\n        Game memory game = getGame(gameId);\\n        return game.entryFee;\\n    }\\n\\n    /// Pause game in case of suspicious activity\\n    function pauseGame() public onlyOwner {\\n        _pause();\\n    }\\n\\n    /// Unpause game\\n    function unpauseGame() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    /* ========================================================================================= */\\n    // Commit\\n    /* ========================================================================================= */\\n\\n    /// Whoever calls this makes a new game and becomes \\\"p1\\\"\\n    /// Requires a sha256 encoded move and password to be stored as\\n    /// A player can make multiple games at a time.\\n    ///\\n    /// @param encChoice sha256 hashed move and password\\n    /// @param entryFee The amount of entry fee required for this game.\\n    function startGame(bytes32 encChoice, uint256 entryFee)\\n        public\\n        checkEntryFeeEnough(entryFee)\\n        checkAddressHasSufficientBalance(entryFee)\\n        whenNotPaused\\n    {\\n        Game storage game = Games[_games.current()];\\n        _games.increment();\\n\\n        game.p1 = msg.sender;\\n        game.entryFee = entryFee;\\n        game.p1SaltedChoice = encChoice;\\n\\n        _subtractFromBalance(msg.sender, entryFee);\\n        emit CreatedGame(msg.sender, entryFee, block.timestamp);\\n    }\\n\\n    /// Allows p2 to join an existing game by gameId\\n    /// Requires player to commit their hashed move and password to join.\\n    /// Will fail if player does not have high enough balance on contract.\\n    ///\\n    /// @param gameId ID of game stored in local storage.\\n    /// @param encChoice sha256 hashed move and password\\n    /// @param entryFee The amount of entry fee required for this game.\\n    function joinGame(\\n        uint256 gameId,\\n        bytes32 encChoice,\\n        uint256 entryFee\\n    ) public checkAddressHasSufficientBalance(entryFee) whenNotPaused {\\n        Game storage game = Games[gameId];\\n        address player1 = game.p1;\\n\\n        if (player1 == address(0)) revert Errors.IndexOutOfBounds(gameId);\\n        if (player1 == msg.sender) revert Errors.CannotJoinGame(false, true);\\n        if (game.p2 != address(0)) revert Errors.CannotJoinGame(true, false);\\n        if (entryFee < game.entryFee) revert Errors.AmountTooLow(entryFee, game.entryFee);\\n\\n        game.p2 = msg.sender;\\n        game.encChoice = encChoice;\\n        game.timerStart = block.timestamp;\\n\\n        _subtractFromBalance(msg.sender, entryFee);\\n        emit JoinedGameOf(msg.sender, player1, gameId, entryFee, block.timestamp);\\n    }\\n\\n    /* ========================================================================================= */\\n    // Reveal\\n    /* ========================================================================================= */\\n\\n    function revealChoice(uint256 gameId, string calldata movePw) public whenNotPaused {\\n        Game storage game = Games[gameId];\\n        address player1 = game.p1;\\n        address player2 = game.p2;\\n\\n        if (player1 == address(0)) revert Errors.IndexOutOfBounds(gameId);\\n        if (player2 == address(0)) revert Errors.NoSecondPlayer();\\n\\n        if (msg.sender == player1) {\\n            if (game.p1ClearChoice != Choices.NONE)\\n                revert Errors.AlreadyRevealed(msg.sender, gameId);\\n            game.p1ClearChoice = _getHashChoice(game.p1SaltedChoice, movePw);\\n            return;\\n        }\\n\\n        if (msg.sender == player2) {\\n            if (game.p2ClearChoice != Choices.NONE)\\n                revert Errors.AlreadyRevealed(msg.sender, gameId);\\n            game.p2ClearChoice = _getHashChoice(game.encChoice, movePw);\\n            return;\\n        }\\n    }\\n\\n    /* ========================================================================================= */\\n    // Resolve\\n    /* ========================================================================================= */\\n\\n    /// @dev Game is not resolvable if timer is still running and both players\\n    ///      have not revealed their move.\\n    function resolveGame(uint256 gameId) public whenNotPaused {\\n        Game storage game = Games[gameId];\\n        if (game.p1 == address(0)) revert Errors.IndexOutOfBounds(gameId);\\n        if (game.p2 == address(0)) revert Errors.NoSecondPlayer();\\n        if (game.resolved) revert Errors.NotResolvable(false, false, false, true);\\n\\n        bool isTimerRunning = !_didTimerRunOut(game.timerStart);\\n        bool isP1ChoiceNone = game.p1ClearChoice == Choices.NONE;\\n        bool isP2ChoiceNone = game.p2ClearChoice == Choices.NONE;\\n\\n        if (isTimerRunning && (isP2ChoiceNone || isP1ChoiceNone))\\n            revert Errors.NotResolvable(isTimerRunning, isP1ChoiceNone, isP2ChoiceNone, false);\\n        uint256 gameBalance = game.entryFee * 2;\\n\\n        /// Prevent re-entrancy.\\n        game.resolved = true;\\n\\n        // If we are here that means both players revealed their move.\\n        // If both revealed their move in time we can choose a winner.\\n        if (isTimerRunning) {\\n            _chooseWinner(game.p1ClearChoice, game.p2ClearChoice, game.p1, game.p2, gameBalance);\\n            return;\\n        }\\n\\n        // Timer ran out and only p2 did not reveal\\n        if (!isTimerRunning && !isP1ChoiceNone && isP2ChoiceNone) {\\n            _payout(game.p1, gameBalance);\\n            return;\\n        }\\n\\n        // Timer ran out and only p1 did not reveal\\n        if (!isTimerRunning && isP1ChoiceNone && !isP2ChoiceNone) {\\n            _payout(game.p2, gameBalance);\\n            return;\\n        }\\n        // If both players fail to reveal the entryFee gets \\\"burned\\\" ;)\\n    }\\n\\n    /* ========================================================================================= */\\n    // Internals\\n    /* ========================================================================================= */\\n\\n    /// How PRS chooses a winner when two choices are revealed.\\n    /// @dev Essential that you ZERO OUT ANY GAME BALANCES before calling this.\\n    function _chooseWinner(\\n        Choices p1Choice,\\n        Choices p2Choice,\\n        address p1,\\n        address p2,\\n        uint256 gameBalance\\n    ) internal {\\n        if (p1Choice == p2Choice) {\\n            _payout(p1, gameBalance / 2);\\n            _payout(p2, gameBalance / 2);\\n            emit GameDraw(p1, p1Choice, p2, p2Choice, gameBalance, block.timestamp);\\n            return;\\n        }\\n\\n        if (\\n            (p1Choice == Choices.PAPER && p2Choice == Choices.ROCK) ||\\n            (p1Choice == Choices.ROCK && p2Choice == Choices.SCISSORS) ||\\n            (p1Choice == Choices.SCISSORS && p2Choice == Choices.PAPER)\\n        ) {\\n            _payout(p1, gameBalance);\\n            emit WonGameAgainst(p1, p1Choice, p2, p2Choice, gameBalance, block.timestamp);\\n            return;\\n        }\\n\\n        if (p1Choice == Choices.INVALID) {\\n            _payout(p2, gameBalance);\\n            emit WonGameAgainst(p2, p2Choice, p1, p1Choice, gameBalance, block.timestamp);\\n            return;\\n        }\\n\\n        if (p2Choice == Choices.INVALID) {\\n            _payout(p1, gameBalance);\\n            emit WonGameAgainst(p1, p1Choice, p2, p2Choice, gameBalance, block.timestamp);\\n            return;\\n        }\\n\\n        _payout(p2, gameBalance);\\n        emit WonGameAgainst(p2, p2Choice, p1, p1Choice, gameBalance, block.timestamp);\\n    }\\n\\n    function _didTimerRunOut(uint256 timerStart) internal view returns (bool) {\\n        return block.timestamp > timerStart + revealTimeout;\\n    }\\n\\n    function _getHashChoice(bytes32 hashChoice, string calldata clearChoice)\\n        internal\\n        pure\\n        returns (Choices)\\n    {\\n        bytes32 hashedClearChoice = sha256(abi.encodePacked(clearChoice));\\n        if (hashChoice != hashedClearChoice) revert Errors.InvalidPassword();\\n\\n        bytes1 first = bytes(clearChoice)[0];\\n\\n        if (first == 0x31) {\\n            return Choices.ROCK;\\n        } else if (first == 0x32) {\\n            return Choices.PAPER;\\n        } else if (first == 0x33) {\\n            return Choices.SCISSORS;\\n        }\\n\\n        return Choices.INVALID;\\n    }\\n\\n    /// Initializes Tableland table to store record of games played.\\n    /// @param tablelandRegistry Address of the \\\"tableland registry\\\" on the chain this will be deployed on\\n    /// @dev Abstracted out to a function so inherited contract can call this for testing.\\n    function _createTable(address tablelandRegistry) internal {\\n        _tableland = ITablelandTables(tablelandRegistry);\\n\\n        /// @dev See tableland docs for more info\\n        string memory tableColumns = \\\"(\\\"\\n            \\\"game_id INTEGER UNIQUE, \\\"\\n            \\\"created_at_timestamp INTEGER, \\\"\\n            \\\"game_entry_fee INTEGER, \\\"\\n            \\\"player_1 TEXT, \\\"\\n            \\\"player_2 TEXT, \\\"\\n            \\\"winner TEXT, \\\"\\n            \\\"player_1_move INTEGER, \\\"\\n            \\\"player_2_move INTEGER \\\"\\n        \\\");\\\";\\n\\n        /// @dev Stores unique ID for our created table\\n        _gameTableId = _tableland.createTable(\\n            address(this),\\n            string.concat(\\n                \\\"CREATE TABLE\\\",\\n                _tablePrefix,\\n                \\\"_\\\",\\n                Strings.toString(block.chainid),\\n                \\\" \\\",\\n                tableColumns\\n            )\\n        );\\n\\n        /// @dev Stores full table name for new table.\\n        _gameTable = string.concat(\\n            _tablePrefix,\\n            \\\"_\\\",\\n            Strings.toString(block.chainid),\\n            \\\"_\\\",\\n            Strings.toString(_gameTableId)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7f672db1cbfa3501db6d76a0955b2e75926de73299fdd0a48677a9eea752e706\",\"license\":\"UNLICENSED\"},\"src/TaxableGame.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport { Errors } from \\\"./Errors.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n// @notice Abstract contract to handle fees, taxes, balances, and payouts of players\\nabstract contract TaxableGame is Ownable, ReentrancyGuard, Pausable {\\n    // @notice Variable minimum entry fee in gwei\\n    uint256 public minEntryFee = 10000000 gwei; // 0.01 eth\\n    // @notice Tax percent the game takes for each round of play\\n    uint256 public taxPercent = 5;\\n\\n    // @notice Where we keep balances of players and the contract itself\\n    mapping(address => uint256) internal _balances;\\n\\n    event PaidOut(address indexed, uint256, uint256);\\n\\n    // @notice Check to determine if this address has enough balance to participate\\n    modifier checkAddressHasSufficientBalance(uint256 entryFee) {\\n        uint256 balance = balanceOf(msg.sender);\\n        if (balance < entryFee) revert Errors.PlayerBalanceNotEnough(balance, entryFee);\\n        _;\\n    }\\n\\n    modifier checkEntryFeeEnough(uint256 entryFee) {\\n        if (entryFee < minEntryFee) revert Errors.AmountTooLow(entryFee, minEntryFee);\\n        _;\\n    }\\n\\n    /* ========================================================================================= */\\n    // Receiving and withdrawing\\n    /* ========================================================================================= */\\n\\n    // @notice Players increase their balance by sending the contract tokens\\n    receive() external payable {\\n        _addToBalance(msg.sender, msg.value);\\n    }\\n\\n    // @notice Players can withdraw their balance from the contract\\n    function withdraw() public payable whenNotPaused {\\n        uint256 balance = balanceOf(msg.sender);\\n        if (address(this).balance < balance) revert Errors.NotEnoughMoneyInContract(address(this).balance, balance);\\n        _setBalance(msg.sender, 0);\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    // @notice Withdraws tax from games played to contract owner\\n    function withdrawTax() public payable onlyOwner {\\n        uint256 balance = balanceOf(address(this));\\n        if (address(this).balance < balance) revert Errors.NotEnoughMoneyInContract(address(this).balance, balance);\\n        _setBalance(address(this), 0);\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    /* ========================================================================================= */\\n    // Fees and taxes\\n    /* ========================================================================================= */\\n    function setMinEntryFee(uint256 fee) public onlyOwner {\\n        minEntryFee = fee;\\n    }\\n\\n    function setTaxPercent(uint256 pct) public onlyOwner {\\n        taxPercent = pct;\\n    }\\n\\n    /* ========================================================================================= */\\n    // Balances\\n    /* ========================================================================================= */\\n\\n    // @notice Entire balance of contract\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    // @notice Balance for players and this contract itself\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function _addToBalance(address account, uint256 amount) internal {\\n        uint256 currentBalance = balanceOf(account);\\n        uint256 newBalance = currentBalance + amount;\\n        _setBalance(account, newBalance);\\n    }\\n\\n    function _subtractFromBalance(address account, uint256 amount) internal {\\n        uint256 currentBalance = balanceOf(account);\\n        uint256 newBalance = currentBalance - amount;\\n        if (0 >= newBalance) {\\n            newBalance = 0;\\n        }\\n        _setBalance(account, newBalance);\\n    }\\n\\n    function _setBalance(address account, uint256 balance) internal {\\n        if (balance < 0) revert Errors.InvalidBalance(balance);\\n        _balances[account] = balance;\\n    }\\n\\n    /* ========================================================================================= */\\n    // Payments\\n    /* ========================================================================================= */\\n    \\n    // @return payout Amount paid to player less tax\\n    // @return tax    Amount taxed from payout\\n    function _getPayoutWithTax(uint256 amount) internal view returns (uint256, uint256) {\\n        uint256 tax = (amount / 100) * taxPercent;\\n        uint256 payout = amount - tax;\\n        return (payout, tax);\\n    }\\n\\n    // @notice A simple, and slightly UNSAFE payout function.\\n    //         Ensure that you're setting balances to zero wherever this is called.\\n    function _payout(address player, uint256 amount) internal {\\n        (uint256 payout, uint256 tax) = _getPayoutWithTax(amount);\\n\\n        _addToBalance(address(this), tax);\\n        _addToBalance(player, payout);\\n\\n        emit PaidOut(player, payout, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x77d387770c2f5ec797bc6cd0f66361dba3eb2d6e2e9face3b8ece108bd7211d0\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c80637541f41c116100b6578063dc8e9e001161006f578063dc8e9e0014610406578063dfa20f0a1461042f578063e8c5876314610439578063f2fde38b14610476578063f712545b1461049f578063fb8365e0146104c857610155565b80637541f41c146102e257806376e5b8621461030d5780638da5cb5b14610338578063a2f77bcc14610363578063b7a5a5b6146103a0578063dbbf70eb146103c957610155565b8063499831f211610108578063499831f2146101fa5780635b027c33146102115780635c975abb1461023a578063611783861461026557806370a082311461028e578063715018a6146102cb57610155565b806312065fe01461015a578063305243d91461018557806338b640851461019c5780633ccfd60b146101c55780634376cb34146101cf57610155565b366101555761015333346104f1565b005b600080fd5b34801561016657600080fd5b5061016f61051e565b60405161017c9190612355565b60405180910390f35b34801561019157600080fd5b5061019a610526565b005b3480156101a857600080fd5b506101c360048036038101906101be91906123a6565b610538565b005b6101cd61054a565b005b3480156101db57600080fd5b506101e46105fb565b6040516101f19190612355565b60405180910390f35b34801561020657600080fd5b5061020f610601565b005b34801561021d57600080fd5b50610238600480360381019061023391906123a6565b610613565b005b34801561024657600080fd5b5061024f610625565b60405161025c91906123ee565b60405180910390f35b34801561027157600080fd5b5061028c600480360381019061028791906123a6565b61063c565b005b34801561029a57600080fd5b506102b560048036038101906102b09190612467565b61064e565b6040516102c29190612355565b60405180910390f35b3480156102d757600080fd5b506102e0610697565b005b3480156102ee57600080fd5b506102f76106ab565b6040516103049190612355565b60405180910390f35b34801561031957600080fd5b506103226106b1565b60405161032f9190612355565b60405180910390f35b34801561034457600080fd5b5061034d6106b7565b60405161035a91906124a3565b60405180910390f35b34801561036f57600080fd5b5061038a600480360381019061038591906123a6565b6106e0565b6040516103979190612632565b60405180910390f35b3480156103ac57600080fd5b506103c760048036038101906103c291906123a6565b61090f565b005b3480156103d557600080fd5b506103f060048036038101906103eb91906123a6565b610cf7565b6040516103fd9190612355565b60405180910390f35b34801561041257600080fd5b5061042d6004803603810190610428919061267a565b610d12565b005b61043761104f565b005b34801561044557600080fd5b50610460600480360381019061045b91906123a6565b611100565b60405161046d9190612355565b60405180910390f35b34801561048257600080fd5b5061049d60048036038101906104989190612467565b6111e2565b005b3480156104ab57600080fd5b506104c660048036038101906104c19190612732565b611266565b005b3480156104d457600080fd5b506104ef60048036038101906104ea9190612792565b61159d565b005b60006104fc8361064e565b90506000828261050c9190612801565b90506105188482611888565b50505050565b600047905090565b61052e611916565b610536611994565b565b610540611916565b8060068190555050565b6105526119f7565b600061055d3361064e565b9050804710156105a65747816040517fe1310fcf00000000000000000000000000000000000000000000000000000000815260040161059d929190612857565b60405180910390fd5b6105b1336000611888565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156105f7573d6000803e3d6000fd5b5050565b60065481565b610609611916565b610611611a41565b565b61061b611916565b8060038190555050565b6000600260009054906101000a900460ff16905090565b610644611916565b8060048190555050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61069f611916565b6106a96000611aa4565b565b60045481565b60035481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6106e8612298565b6000600860008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160020160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561079557826040517f44945fcc00000000000000000000000000000000000000000000000000000000815260040161078c9190612355565b60405180910390fd5b806040518061012001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660048111156107db576107da6124d7565b5b60048111156107ed576107ec6124d7565b5b81526020016002820160019054906101000a900460ff166004811115610816576108156124d7565b5b6004811115610828576108276124d7565b5b81526020016002820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff161515151581525050915050919050565b6109176119f7565b6000600860008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160020160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109c457816040517f44945fcc0000000000000000000000000000000000000000000000000000000081526004016109bb9190612355565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a4f576040517f39e523ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060060160009054906101000a900460ff1615610aac57600080600060016040517f3f79bc1c000000000000000000000000000000000000000000000000000000008152600401610aa39493929190612880565b60405180910390fd5b6000610abb8260050154611b68565b1590506000806004811115610ad357610ad26124d7565b5b8360020160009054906101000a900460ff166004811115610af757610af66124d7565b5b1490506000806004811115610b0f57610b0e6124d7565b5b8460020160019054906101000a900460ff166004811115610b3357610b326124d7565b5b149050828015610b4857508080610b475750815b5b15610b915782828260006040517f3f79bc1c000000000000000000000000000000000000000000000000000000008152600401610b889493929190612880565b60405180910390fd5b600060028560040154610ba491906128c5565b905060018560060160006101000a81548160ff0219169083151502179055508315610c4a57610c408560020160009054906101000a900460ff168660020160019054906101000a900460ff168760020160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff168860030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685611b81565b5050505050610cf4565b83158015610c56575082155b8015610c5f5750815b15610c9c57610c928560020160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682611fa7565b5050505050610cf4565b83158015610ca75750825b8015610cb1575081155b15610cee57610ce48560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682611fa7565b5050505050610cf4565b50505050505b50565b600080610d03836106e0565b90508060c00151915050919050565b806000610d1e3361064e565b905081811015610d675780826040517f3592b9f4000000000000000000000000000000000000000000000000000000008152600401610d5e929190612857565b60405180910390fd5b610d6f6119f7565b600060086000878152602001908152602001600020905060008160020160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e2157866040517f44945fcc000000000000000000000000000000000000000000000000000000008152600401610e189190612355565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e9657600060016040517f7274f7b8000000000000000000000000000000000000000000000000000000008152600401610e8d92919061291f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f2f57600160006040517f7274f7b8000000000000000000000000000000000000000000000000000000008152600401610f2692919061291f565b60405180910390fd5b8160040154851015610f7e578482600401546040517f1cc6243f000000000000000000000000000000000000000000000000000000008152600401610f75929190612857565b60405180910390fd5b338260030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550858260010181905550428260050181905550610fdd3386612021565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f70fc8cbbf6bf1c3929b063284d69be02695d9de0c6a918f74b2277d81ee28c4b89884260405161103e93929190612948565b60405180910390a350505050505050565b611057611916565b60006110623061064e565b9050804710156110ab5747816040517fe1310fcf0000000000000000000000000000000000000000000000000000000081526004016110a2929190612857565b60405180910390fd5b6110b6306000611888565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156110fc573d6000803e3d6000fd5b5050565b60008061110c836106e0565b905061111b8160e00151611b68565b15611152576040517f7737a3c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160a0015173ffffffffffffffffffffffffffffffffffffffff1614156111bd576040517fd82599da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060e00151426111cd919061297f565b6006546111da919061297f565b915050919050565b6111ea611916565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561125a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125190612a36565b60405180910390fd5b61126381611aa4565b50565b61126e6119f7565b600060086000858152602001908152602001600020905060008160020160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561134957856040517f44945fcc0000000000000000000000000000000000000000000000000000000081526004016113409190612355565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113b0576040517f39e523ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156114a257600060048111156113f8576113f76124d7565b5b8360020160009054906101000a900460ff16600481111561141c5761141b6124d7565b5b146114605733866040517f33f29762000000000000000000000000000000000000000000000000000000008152600401611457929190612a56565b60405180910390fd5b61146f8360000154868661205b565b8360020160006101000a81548160ff02191690836004811115611495576114946124d7565b5b0217905550505050611598565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561159457600060048111156114ea576114e96124d7565b5b8360020160019054906101000a900460ff16600481111561150e5761150d6124d7565b5b146115525733866040517f33f29762000000000000000000000000000000000000000000000000000000008152600401611549929190612a56565b60405180910390fd5b6115618360010154868661205b565b8360020160016101000a81548160ff02191690836004811115611587576115866124d7565b5b0217905550505050611598565b5050505b505050565b806003548110156115e957806003546040517f1cc6243f0000000000000000000000000000000000000000000000000000000081526004016115e0929190612857565b60405180910390fd5b8160006115f53361064e565b90508181101561163e5780826040517f3592b9f4000000000000000000000000000000000000000000000000000000008152600401611635929190612857565b60405180910390fd5b6116466119f7565b60006008600061165660076121e5565b8152602001908152602001600020905061167060076121f3565b338160020160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508481600401819055508581600001819055506116cf3386612021565b3373ffffffffffffffffffffffffffffffffffffffff167f0bb8b3c1699d88c3b6dec18d63fc02f194b610b760b178b7292b481906b3ad668642604051611717929190612857565b60405180910390a2505050505050565b6060600082141561176f576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611883565b600082905060005b600082146117a157808061178a90612a7f565b915050600a8261179a9190612af7565b9150611777565b60008167ffffffffffffffff8111156117bd576117bc612b28565b5b6040519080825280601f01601f1916602001820160405280156117ef5781602001600182028036833780820191505090505b5090505b6000851461187c57600182611808919061297f565b9150600a856118179190612b57565b60306118239190612801565b60f81b81838151811061183957611838612b88565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856118759190612af7565b94506117f3565b8093505050505b919050565b60008110156118ce57806040517f482a52790000000000000000000000000000000000000000000000000000000081526004016118c59190612355565b60405180910390fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b61191e612209565b73ffffffffffffffffffffffffffffffffffffffff1661193c6106b7565b73ffffffffffffffffffffffffffffffffffffffff1614611992576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198990612c03565b60405180910390fd5b565b61199c612211565b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6119e0612209565b6040516119ed91906124a3565b60405180910390a1565b6119ff610625565b15611a3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3690612c6f565b60405180910390fd5b565b611a496119f7565b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a8d612209565b604051611a9a91906124a3565b60405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060065482611b789190612801565b42119050919050565b836004811115611b9457611b936124d7565b5b856004811115611ba757611ba66124d7565b5b1415611c4957611bc383600283611bbe9190612af7565b611fa7565b611bd982600283611bd49190612af7565b611fa7565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f0b9941cef1aa10b842b624e5965581bafc13a2025e1030cf301a233a74ce07ec87878542604051611c3c9493929190612c9e565b60405180910390a3611fa0565b60026004811115611c5d57611c5c6124d7565b5b856004811115611c7057611c6f6124d7565b5b148015611ca1575060016004811115611c8c57611c8b6124d7565b5b846004811115611c9f57611c9e6124d7565b5b145b80611d00575060016004811115611cbb57611cba6124d7565b5b856004811115611cce57611ccd6124d7565b5b148015611cff575060036004811115611cea57611ce96124d7565b5b846004811115611cfd57611cfc6124d7565b5b145b5b80611d5f575060036004811115611d1a57611d196124d7565b5b856004811115611d2d57611d2c6124d7565b5b148015611d5e575060026004811115611d4957611d486124d7565b5b846004811115611d5c57611d5b6124d7565b5b145b5b15611dde57611d6e8382611fa7565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f1f0963b195b50f5d46ec758a39bbbcab4167b8077db3aeca518b991899f00bec87878542604051611dd19493929190612c9e565b60405180910390a3611fa0565b600480811115611df157611df06124d7565b5b856004811115611e0457611e036124d7565b5b1415611e8457611e148282611fa7565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f1f0963b195b50f5d46ec758a39bbbcab4167b8077db3aeca518b991899f00bec86888542604051611e779493929190612c9e565b60405180910390a3611fa0565b600480811115611e9757611e966124d7565b5b846004811115611eaa57611ea96124d7565b5b1415611f2a57611eba8382611fa7565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f1f0963b195b50f5d46ec758a39bbbcab4167b8077db3aeca518b991899f00bec87878542604051611f1d9493929190612c9e565b60405180910390a3611fa0565b611f348282611fa7565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f1f0963b195b50f5d46ec758a39bbbcab4167b8077db3aeca518b991899f00bec86888542604051611f979493929190612c9e565b60405180910390a35b5050505050565b600080611fb38361225a565b91509150611fc130826104f1565b611fcb84836104f1565b8373ffffffffffffffffffffffffffffffffffffffff167f7ca7469714f3e1d8732b3a67b0599fba3be82b826137fcfa805c19afc2b20aeb8342604051612013929190612857565b60405180910390a250505050565b600061202c8361064e565b90506000828261203c919061297f565b90508060001061204b57600090505b6120558482611888565b50505050565b60008060028484604051602001612073929190612d22565b60405160208183030381529060405260405161208f9190612db5565b602060405180830381855afa1580156120ac573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906120cf9190612de1565b905080851461210a576040517f0f9391d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848460008181106121205761211f612b88565b5b9050013560f81c60f81b9050603160f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415612165576001925050506121de565b603260f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561219e576002925050506121de565b603360f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156121d7576003925050506121de565b6004925050505b9392505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600033905090565b612219610625565b612258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224f90612e5a565b60405180910390fd5b565b600080600060045460648561226f9190612af7565b61227991906128c5565b905060008185612289919061297f565b90508082935093505050915091565b6040518061012001604052806000801916815260200160008019168152602001600060048111156122cc576122cb6124d7565b5b8152602001600060048111156122e5576122e46124d7565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581525090565b6000819050919050565b61234f8161233c565b82525050565b600060208201905061236a6000830184612346565b92915050565b600080fd5b600080fd5b6123838161233c565b811461238e57600080fd5b50565b6000813590506123a08161237a565b92915050565b6000602082840312156123bc576123bb612370565b5b60006123ca84828501612391565b91505092915050565b60008115159050919050565b6123e8816123d3565b82525050565b600060208201905061240360008301846123df565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061243482612409565b9050919050565b61244481612429565b811461244f57600080fd5b50565b6000813590506124618161243b565b92915050565b60006020828403121561247d5761247c612370565b5b600061248b84828501612452565b91505092915050565b61249d81612429565b82525050565b60006020820190506124b86000830184612494565b92915050565b6000819050919050565b6124d1816124be565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110612517576125166124d7565b5b50565b600081905061252882612506565b919050565b60006125388261251a565b9050919050565b6125488161252d565b82525050565b61255781612429565b82525050565b6125668161233c565b82525050565b612575816123d3565b82525050565b6101208201600082015161259260008501826124c8565b5060208201516125a560208501826124c8565b5060408201516125b8604085018261253f565b5060608201516125cb606085018261253f565b5060808201516125de608085018261254e565b5060a08201516125f160a085018261254e565b5060c082015161260460c085018261255d565b5060e082015161261760e085018261255d565b5061010082015161262c61010085018261256c565b50505050565b600061012082019050612648600083018461257b565b92915050565b612657816124be565b811461266257600080fd5b50565b6000813590506126748161264e565b92915050565b60008060006060848603121561269357612692612370565b5b60006126a186828701612391565b93505060206126b286828701612665565b92505060406126c386828701612391565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f8401126126f2576126f16126cd565b5b8235905067ffffffffffffffff81111561270f5761270e6126d2565b5b60208301915083600182028301111561272b5761272a6126d7565b5b9250929050565b60008060006040848603121561274b5761274a612370565b5b600061275986828701612391565b935050602084013567ffffffffffffffff81111561277a57612779612375565b5b612786868287016126dc565b92509250509250925092565b600080604083850312156127a9576127a8612370565b5b60006127b785828601612665565b92505060206127c885828601612391565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061280c8261233c565b91506128178361233c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561284c5761284b6127d2565b5b828201905092915050565b600060408201905061286c6000830185612346565b6128796020830184612346565b9392505050565b600060808201905061289560008301876123df565b6128a260208301866123df565b6128af60408301856123df565b6128bc60608301846123df565b95945050505050565b60006128d08261233c565b91506128db8361233c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612914576129136127d2565b5b828202905092915050565b600060408201905061293460008301856123df565b61294160208301846123df565b9392505050565b600060608201905061295d6000830186612346565b61296a6020830185612346565b6129776040830184612346565b949350505050565b600061298a8261233c565b91506129958361233c565b9250828210156129a8576129a76127d2565b5b828203905092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a206026836129b3565b9150612a2b826129c4565b604082019050919050565b60006020820190508181036000830152612a4f81612a13565b9050919050565b6000604082019050612a6b6000830185612494565b612a786020830184612346565b9392505050565b6000612a8a8261233c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612abd57612abc6127d2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b028261233c565b9150612b0d8361233c565b925082612b1d57612b1c612ac8565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000612b628261233c565b9150612b6d8361233c565b925082612b7d57612b7c612ac8565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612bed6020836129b3565b9150612bf882612bb7565b602082019050919050565b60006020820190508181036000830152612c1c81612be0565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612c596010836129b3565b9150612c6482612c23565b602082019050919050565b60006020820190508181036000830152612c8881612c4c565b9050919050565b612c988161252d565b82525050565b6000608082019050612cb36000830187612c8f565b612cc06020830186612c8f565b612ccd6040830185612346565b612cda6060830184612346565b95945050505050565b600081905092915050565b82818337600083830152505050565b6000612d098385612ce3565b9350612d16838584612cee565b82840190509392505050565b6000612d2f828486612cfd565b91508190509392505050565b600081519050919050565b600081905092915050565b60005b83811015612d6f578082015181840152602081019050612d54565b83811115612d7e576000848401525b50505050565b6000612d8f82612d3b565b612d998185612d46565b9350612da9818560208601612d51565b80840191505092915050565b6000612dc18284612d84565b915081905092915050565b600081519050612ddb8161264e565b92915050565b600060208284031215612df757612df6612370565b5b6000612e0584828501612dcc565b91505092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612e446014836129b3565b9150612e4f82612e0e565b602082019050919050565b60006020820190508181036000830152612e7381612e37565b905091905056fea2646970667358221220a64ed4545777df9f2246ac0f253393274862be34780113539c691fdf2424b43164736f6c634300080c0033",
  "devdoc": {
    "author": "DOPE DAO",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Find the list of tableland registries here https://docs.tableland.xyz/limits-and-deployed-contracts#ae3cfc1cfd2941bfa401580aa1e05c5e",
        "params": {
          "tablelandRegistry": "Address of the \"tableland registry\" on the chain this will be deployed on"
        }
      },
      "getGame(uint256)": {
        "returns": {
          "_0": "Game struct"
        }
      },
      "getGameEntryFee(uint256)": {
        "returns": {
          "_0": "Entry fee for a game id. 1/2 the \"pot\""
        }
      },
      "joinGame(uint256,bytes32,uint256)": {
        "params": {
          "encChoice": "sha256 hashed move and password",
          "entryFee": "The amount of entry fee required for this game.",
          "gameId": "ID of game stored in local storage."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resolveGame(uint256)": {
        "details": "Game is not resolvable if timer is still running and both players      have not revealed their move."
      },
      "startGame(bytes32,uint256)": {
        "params": {
          "encChoice": "sha256 hashed move and password",
          "entryFee": "The amount of entry fee required for this game."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PAPER, ROCK, SCISSORS",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Create tableland schema for our leaderboard."
      },
      "getGame(uint256)": {
        "notice": "Returns a single game for Player 1"
      },
      "getTimeLeft(uint256)": {
        "notice": "Return time left after Player 2 has revealed their move."
      },
      "joinGame(uint256,bytes32,uint256)": {
        "notice": "Allows p2 to join an existing game by gameId Requires player to commit their hashed move and password to join. Will fail if player does not have high enough balance on contract."
      },
      "pauseGame()": {
        "notice": "Pause game in case of suspicious activity"
      },
      "revealTimeout()": {
        "notice": "Both players have 12 hours to reveal their move. If one of them fails to do so the other can take the pot."
      },
      "startGame(bytes32,uint256)": {
        "notice": "Whoever calls this makes a new game and becomes \"p1\" Requires a sha256 encoded move and password to be stored as A player can make multiple games at a time."
      },
      "unpauseGame()": {
        "notice": "Unpause game"
      }
    },
    "notice": "A competitive, token-based, on-chain game of skill that persists results to         a public leaderboard stored in tableland.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 130,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2125,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "minEntryFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2128,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "taxPercent",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2132,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1140,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "revealTimeout",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1147,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "_games",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)583_storage"
      },
      {
        "astId": 1152,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "Games",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Game)1136_storage)"
      },
      {
        "astId": 1155,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "_tableland",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ITablelandTables)1018"
      },
      {
        "astId": 1157,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "_gameTableId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1159,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "_gameTable",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 1162,
        "contract": "src/PaperRockScissors.sol:PaperRockScissors",
        "label": "_tablePrefix",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITablelandTables)1018": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_enum(Choices)1115": {
        "encoding": "inplace",
        "label": "enum PaperRockScissors.Choices",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Game)1136_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PaperRockScissors.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)1136_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)583_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 582,
            "contract": "src/PaperRockScissors.sol:PaperRockScissors",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Game)1136_storage": {
        "encoding": "inplace",
        "label": "struct PaperRockScissors.Game",
        "members": [
          {
            "astId": 1117,
            "contract": "src/PaperRockScissors.sol:PaperRockScissors",
            "label": "p1SaltedChoice",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1119,
            "contract": "src/PaperRockScissors.sol:PaperRockScissors",
            "label": "encChoice",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1122,
            "contract": "src/PaperRockScissors.sol:PaperRockScissors",
            "label": "p1ClearChoice",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Choices)1115"
          },
          {
            "astId": 1125,
            "contract": "src/PaperRockScissors.sol:PaperRockScissors",
            "label": "p2ClearChoice",
            "offset": 1,
            "slot": "2",
            "type": "t_enum(Choices)1115"
          },
          {
            "astId": 1127,
            "contract": "src/PaperRockScissors.sol:PaperRockScissors",
            "label": "p1",
            "offset": 2,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1129,
            "contract": "src/PaperRockScissors.sol:PaperRockScissors",
            "label": "p2",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1131,
            "contract": "src/PaperRockScissors.sol:PaperRockScissors",
            "label": "entryFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1133,
            "contract": "src/PaperRockScissors.sol:PaperRockScissors",
            "label": "timerStart",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1135,
            "contract": "src/PaperRockScissors.sol:PaperRockScissors",
            "label": "resolved",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}